---
title: "Lab 7: Myopia"
subtitle: "Categorical Exploratory Data Analysis"
author: "Dr. Robinson's Key"
format:
  pdf:
    include-in-header:
      - keycol.tex
---

```{r setup, include = F}
knitr::opts_chunk$set(message = FALSE, 
                      fig.align = "center", 
                      echo = TRUE)

## Load in the packages necessary for our analysis: tidyverse
library(tidyverse)
library(patchwork)
```

## Nightlight use and myopia 

In a study reported in *Nature* (Quinn, 1999), a survey of 479 children found that those who had slept with a nightlight or in a fully lit room before the age of two had a higher incidence of nearsightedness (myopia) later in childhood.

In this study, there were two variables studied:

+ `Light`: level of light in room at night (no light, nightlight, full light)
+ `Sight`: level of myopia developed later in childhood (high myopia, myopia, no myopia).  

**1. Which variable is the explanatory variable? Which is the response variable?**

\key{Light is the explanatory variable because we want to see how the response (myopia) changes with the level of light in the room.}

Let's load the data in! 

```{r data}
myopia <- read_csv("data/ChildrenLightSight.csv")
head(myopia)
```

**2. Click on the data set to open it up in the data previewer. What is the observational unit for this study?**

\key{The observational unit is a child.}

## Visualizing One Categorical Variable

### Frequency Bar Plots 

If we wanted to know how many children in our data set were in each level of myopia, we would create a frequency bar plot of the variable `Sight`. Creating a bar plot is similar to what we've done before. 

**Step 1:** Set-up the data and the variable(s) of interest

**Step 2:** Define what geometric object should be plotted on the plot

**Step 3:** Declare nice x- and y-axis labels

Let's carry out these steps in the code chunk below! 

```{r sight-freq-barplot}
ggplot(data = myopia, 
       mapping = aes(x = Sight)
       ) + 
  geom_bar() + 
  labs(x = "Level of Myopia", 
       y = "Number of Children")
```

**3. Which sight group has the largest number of observations?**

\key{The children with no myopia have the largest number of observations.}

4. Using the bar plot, estimate how many children have some level of myopia.

\key{There are about 125 children that have Myopia and about 20 children with High Myopia. Therefore, there are about 145 children with some myopia.}


Using the skills you just acquired, make a bar plot visualizing how many children in our data set slept with a nightlight (`Light`). 

```{r light-freq-barplot}

ggplot(data = myopia, 
       mapping = aes(x = Light)
       ) + 
  geom_bar() + 
  labs(x = "Level of Light", 
       y = "Number of Children")

```

**5. Which light group has the largest number of observations?**

\key{The children who slept with a Nightlight have the largest number of observations.}


### Relative Frequency Bar Plots

We could also choose to display the data as a proportion in a **relative frequency** bar plot. To find the relative frequency, we divide the
count in each level by the total sample size. The resulting values are sample proportions. 

To get *proportions* instead of *counts* we need to override the default statistic `geom_bar()` wants to use. To do this, we tell it we want proportions on the y-axis. We do this using the following code:

```
geom_bar(aes(y = ..prop.., group = 1))
```

Notice, there are two periods (..) before **and** after prop. These periods are necessary to define a new statistic that should be used for the y-axis.  

6. Use this new code to modify the code you had previously. Copy-and-paste your code from the myopia bar plot above and change the y-axis to plot proportions instead of counts. Make sure to change your y-axis label to match proportions rather than counts.

```{r light-prop-barplot}
# Copy-and-paste your code from #4
# Add the aes() input to geom_bar() so your plot has proportions instead of counts!
ggplot(data = myopia, 
       mapping = aes(x = Sight)
       ) + 
  geom_bar(aes(y = ..prop.., group = 1)) + 
  labs(x = "Level of Myopia", 
       y = "Proportion of Children")

```


7. Try removing the `group = 1` input from `geom_bar()`. What happens? What do your bars look like? Make sure to put the `group = 1` back in to your code!

\key{Removing the group = 1 input plots all the proportions at 1 (100%) becuase it is taking the proportion relative to that group and not the entire data set.}


## Summary statistics for categorical variables

The other part of Exploratory Data Analysis (EDA) is making summary statistics. For a categorical variable, this means making frequency tables and relative frequency tables. Let's explore how to do that. 

For this piece you are going to learn more about a tool you've seen previously -- "the pipe." This is a special operator written as `%>%`. The pipe
is used as a connecting piece to keep your data flowing through a pipeline. We will use the pipe to string together three R functions:

+ `summarize()`, which creates summary statistics of specified variables
+ `group_by()`, which creates groups of observations based on a categorical 
variable
+ `mutate()`, which modifies our dataset by adding new variables or changing
existing variables

If I use `group_by()` in my analysis, it is nearly always paired with `summarize()` -- they are function friends!

Let's start with a short data pipeline.

```{r summarize}
myopia %>%
  summarize(n = n())
```

**8. What does the variable n tell us?**

\key{The variable n tells us our sample size (479 children in the study).}

We can add another piece to the pipeline to make it a bit more interesting. Let's add a `group_by()` step to make groups based on the `Sight` variable. 

```{r group-by-summarize}
myopia %>%
  group_by(Sight) %>% 
  count()
```

**9. How many observations are in the Myopia and High Myopia groups?**

\key{There are 16 children in the High Myopia group and 122 children in the Myopia group.}


Finally, we might want to add one more piece to the pipeline to create a `proportion` variable of the relative frequencies of each level of `Sight`. *Hint:* Think about what your numerator for your proportion should be based on your resulting code chunk output above.

```{r group-by-summarize-mutate}
myopia %>%
  group_by(Sight) %>% 
  count() %>% 
  ungroup() %>%
  mutate(proportion = n / sum(n))
```

**10. What proportion of children have high myopia?**

\key{3.34\% (0.0334) children have high myopia.}


Now, take the code you just filled in and address the following question about the `Light` variable!

**11. What proportion of children slept with full light?**

```{r light-proportions}
# Put your code here to find the proportion of children that slept with different nightlights
myopia %>%
  group_by(Light) %>% 
  count() %>% 
  ungroup() %>%
  mutate(proportion = n / sum(n))
```

\key{17.7\% (0.177) children slept with full light.}


If we want to look at the `Light` and `Sight` variable together, we can visualize this with (1) a stacked bar plot (2) a filled bar plot (3) a dodged bar plot and (4) a mosaic plot.

```{r, fig.width = 12, fig.height = 3}

# Code to create the stacked barplot
stacked_barplot <- ggplot(data = myopia, 
       mapping = aes(x = Light, fill = Sight)
       ) + 
  geom_bar(position = "stack") + 
  labs(x = "Level of Myopia", 
       y = "Number of Children") +
  ggtitle("Stacked")



# Code to create the filled barplot
filled_barplot <- ggplot(data = myopia, 
       mapping = aes(x = Light, fill = Sight)
       ) + 
  geom_bar(position = "fill") + 
  labs(x = "Level of Myopia", 
       y = "Proportion of Children")  +
  ggtitle("Filled")



# Code to create the dodged barplot
dodged_barplot <- ggplot(data = myopia, 
       mapping = aes(x = Light, fill = Sight)
       ) + 
  geom_bar(position = "dodge") + 
  labs(x = "Level of Myopia", 
       y = "Number of Children")  +
  ggtitle("Dodged")



stacked_barplot + filled_barplot + dodged_barplot

```

12. The code above creates the stacked, filled, and dodged barplot. What part of the code changes the way the bars are displayed between the three types of plots?

\key{The position = changes the way the bars are displayed.}

We can summarize two numerical variables with a contingency table. The `table()` function can be used to create a contingency table between an explanatory and response variable.

13. Fill in the code below with your response and explanatory variables to create a contingency table. *`Light` should be in the columns and `Sight` should be in the rows.*

```{r}
table_counts <- with(data = myopia, table(Sight, Light))

addmargins(table_counts)
```

**14. How many children slept with a nightlight?**

\key{223 children slept with a nightlight.}

**15. How many children who slept with a nightlight have Myopia?**

\key{65 children who slept with a nightlight have Myopia.}

**16. What proportion of children who slept with a nightlight have Myopia?** *You can use the code chunk below as a calculator.*

\key{$\frac{65}{223} = 0.291$. 29.1\% of children who slept with a nightlight have Myopia.}

```{r}
65/223
```

If we want to display our contingency tables in proportions based on the row sums, we can use the function `prop.table()` where margin = 2 uses the column sum as the denominator.

```{r}
round(prop.table(table_counts, margin = 2), 3)
```

17. Using the filled bar plot and the proportion contingency table above, do you think the proportion of people with Myopia differs between the different levels of light? Explain your answer in detail.

\key{Yes, it appears that as the level of light changes from no light to full light, the proporiton of people with Myopia increases (no light - 8.8\%, nightlight - 29.1\%, and full light - 49.4\%). This is apparent by the space of the green color in the filled bar plot changing between light levels.}

