---
title: "Lab 7: Myopia"
subtitle: "Categorical Exploratory Data Analysis"
format:
  html: 
    self-contained: true
execute: 
  message: false
  echo: true
  eval: false
---

```{r setup}
#| include: false
## Load in the packages necessary for our analysis: tidyverse
library(tidyverse)
library(janitor)
```

## Nightlight use and myopia

In a study reported in *Nature* (Quinn, 1999), a survey of 479 children found that those who had slept with a nightlight or in a fully lit room before the age of two had a higher incidence of nearsightedness (myopia) later in childhood.

In this study, there were two variables studied:

-   `Light`: level of light in room at night (no light, nightlight, full light)
-   `Sight`: level of myopia developed later in childhood (high myopia, myopia, no myopia).

**1. Which variable is the explanatory variable? Which is the response variable?**

## Load the data

```{r data}
myopia <- read_csv(here::here("two_days", 
                              "Week 7 - ANOVA & One Cat EDA", 
                              "lab", 
                              "data", 
                              "ChildrenLightSight.csv")
                   )
```

**2. Click on the data set to open it up in the data previewer. What is the observational unit for this study?**

## Visualizing One Categorical Variable

### Frequency Bar Plots

If we wanted to know how many children in our data set were in each level of myopia, we would create a frequency bar plot of the variable `Sight`. Creating a bar plot is similar to what we've done before.

**Step 1:** Set-up the data and the variable(s) of interest

**Step 2:** Define what geometric object should be plotted on the plot -- now we're using bars!

**Step 3:** Declare nice x- and y-axis labels

Let's carry out these steps in the code chunk below!

```{r sight-freq-barplot}
ggplot(data = myopia, 
       mapping = aes(x = ____)
       ) + 
  geom_bar() + 
  labs(x = "____", 
       y = "____")
```

**3. Which sight group has the largest number of observations?**

**4.  Using the bar plot, estimate how many children have _some_ level of myopia.**

Using the skills you just acquired, make a bar plot visualizing how many children in our data set slept with a nightlight (`Light`).

```{r light-freq-barplot}


```

**5. Which light group has the largest number of observations?**

### Relative Frequency Bar Plots

We could also choose to display the data as a proportion in a **relative frequency** bar plot. To find the relative frequency, we divide the count in each level by the total sample size. The resulting values are sample proportions.

To get *proportions* instead of *counts* we need to override the default statistic `geom_bar()` wants to use. To do this, we tell it we want proportions on the y-axis. We do this using the following code:

```         
geom_bar(aes(y = ..prop.., group = 1))
```

Notice, there are two periods (**..**) before **and** after prop. These periods are necessary to define a new statistic that should be used for the y-axis.

**6.  Use this new code to modify the code you had previously. Copy-and-paste your code from the [myopia]{.underline} bar plot above and change the y-axis to plot proportions instead of counts. Make sure to change your y-axis label to match proportions rather than counts!**

```{r light-prop-barplot}
# Copy-and-paste your code from #4
# Add the aes() input to geom_bar() so your plot has proportions instead of counts!


```

**7.  Try removing the `group = 1` input from `geom_bar()`. What happens? What do your bars look like? Once you've answered the question, make sure to put the `group = 1` back in to your code!**

## Summary statistics for categorical variables

The other part of Exploratory Data Analysis (EDA) is making summary statistics. For a categorical variable, this means making frequency tables and relative frequency tables. Let's explore how to do that.

For this piece you are going to learn more about a tool you've seen previously -- "the pipe." This is a special operator written as `|>`. The pipe is used as a connecting piece to keep your data flowing through a pipeline. We will use the pipe to string together two R functions:

-   `count()`, which counts the number of observations (rows) for each group of a categorical variable
-   `mutate()`, which modifies our dataset by adding new variables or changing existing variables

Let's start with a short data pipeline.

```{r summarize}
myopia |>
  count()
```

**8. What does the variable n tell us?**

We can add another piece to the pipeline to make it a bit more interesting. Let's add the `Sight` variable into the `count()` function and see what we get!

```{r group-by-summarize}
myopia |>
  count(Sight)
```

**9. How many observations are in the Myopia and High Myopia groups?**

Finally, we might want to add one more piece to the pipeline to create a `proportion` variable of the relative frequencies of each level of `Sight`. *Hint:* Think about what your numerator for your proportion should be based on your resulting code chunk output above.

```{r group-by-summarize-mutate}
myopia |>
  count(Sight) |> 
  mutate(proportion = n / sum(n))
```

**10. What proportion of children have high myopia?**

Now, take the code you just filled in and address the following question about the `Light` variable!

**11. What proportion of children slept with full light?**

```{r light-proportions}
# Put your code here to find the proportion of children that slept with different nightlights


```

If we want to look at the `Light` and `Sight` variable together, we can visualize this with (1) a stacked bar plot (2) a filled bar plot (3) a dodged bar plot and (4) a mosaic plot.

```{r}
#| fig-width: 12
#| fig-height: 3
#| layout-nrow: 1
#| results: hold

# Code to create the stacked barplot
ggplot(data = myopia, 
       mapping = aes(x = Light, fill = Sight)
       ) + 
  geom_bar(position = "stack") + 
  labs(x = "Level of Myopia", 
       y = "Number of Children", 
       title = "Stacked Barplot")



# Code to create the filled barplot
ggplot(data = myopia, 
       mapping = aes(x = Light, fill = Sight)
       ) + 
  geom_bar(position = "fill") + 
  labs(x = "Level of Myopia", 
       y = "Proportion of Children", 
       title = "Filled Barplot")


# Code to create the dodged barplot
ggplot(data = myopia, 
       mapping = aes(x = Light, fill = Sight)
       ) + 
  geom_bar(position = "dodge") + 
  labs(x = "Level of Myopia", 
       y = "Number of Children", 
       title = "Dodged Barplot")

```

**12. The code above creates the stacked, filled, and dodged barplot. What part of the code changes the way the bars are displayed between the three types of plots?**

We can summarize two numerical variables with a contingency table. The `count()` function we used before provided a table of counts for each Sight and Light group, but it wasn't in the format we want for a contingency table. For a contingency table, we want one variable to be on the rows and one variable to be on the columns. The `count()` function puts both variables in the rows, so we need to pivot one of the variables into the columns! This is where a handy tool `pivot_wider()` comes in!

**13. Fill in the code below to generate `count()`s of the `Light` and `Sight` variables. Once you've filled in the code, click the play button to get a contingency table of the counts!**

```{r contingency-table}
myopia |> 
  count(____, ____) |> 
  pivot_wider(names_from = Sight, values_from = n) |> 
  adorn_totals(where = c("row", "col"))
```

**14. How many children slept with a nightlight?**

**15. How many children who slept with a nightlight have Myopia?**

**16. What proportion of children who slept with a nightlight have Myopia?** *You can use the code chunk below as a calculator.*

```{r}

```

If we want to display our contingency tables in proportions, we can change the code above to use the `adorn_percentages()` function instead of the `adorn_totals()` function. It's as simple as that! We do, however, need to tell `adorn_percentages()` how the percentages should be calculated. To calculate the percentage, we need to specify if the denominator (for the percentage) should come from the `"row"` total or from the `"col"` total.

```{r}
myopia |> 
  count(Light, Sight) |> 
  pivot_wider(names_from = Sight, values_from = n) |> 
  adorn_percentages(denominator = "____") 
```

**17. Fill in the code, specifying how the percentages should be calculated. \*Hint: You can use your calculation in #16 to check if you made the correct choice!**

**18. Using the filled bar plot and the proportion contingency table above, do you think the proportion of people with Myopia differs between the different levels of light? Explain your answer [in detail]{.underline}.**
